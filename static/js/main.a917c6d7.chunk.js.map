{"version":3,"sources":["components/TimerControls.js","components/TimeOptions.js","components/VisualTimer.js","components/TimerCard.js","components/SettingsModal.js","components/Header.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["TimerControls","props","className","Button","onClick","togglePause","style","marginRight","isPaused","restartTimer","marginLeft","TimerOptions","radios","name","value","TimerTypes","pomodoro","shortBreak","longBreak","ButtonGroup","toggle","width","map","radio","idx","ToggleButton","type","variant","checked","timerType","onChange","e","updateTimerType","currentTarget","VisualTimer","num","places","timeInSeconds","time","minutes","Math","floor","seconds","margin","fontSize","String","padStart","TimerCard","useState","pomodoroTime","timerTime","setTimerTime","setIsPaused","needToResetTimer","setNeedToResetTimer","setTimerType","prevPomodoroTime","usePrevious","prevShortBreakTime","shortBreakTime","prevLongBreakTime","longBreakTime","TimerLengths","timer","setTimer","ref","useRef","useEffect","current","clearTimeout","navigator","serviceWorker","ready","then","registration","active","postMessage","setTimeout","textAlign","Card","Body","SettingsModal","Modal","aria-labelledby","centered","Header","closeButton","Title","id","Row","Col","min","setUpdatedPomodoroTime","target","onBlur","console","log","timesettings","updatedPomodoroTime","setUpdatedShortBreakTime","updatedShortBreakTime","setUpdatedLongBreakTime","updatedLongBreakTime","Footer","onHide","modalShow","setModalShow","show","isFormValid","setPomodoroTime","setShortBreakTime","setLongBreakTime","App","maxWidth","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","register","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.a917c6d7.chunk.js","sourcesContent":["import Button from 'react-bootstrap/Button';\r\n\r\nfunction TimerControls(props) {\r\n\r\n\r\n    return (\r\n      <div className=\"TimerControls\" >\r\n        <Button onClick={props.togglePause} style={{marginRight: \"1rem\"}}>{props.isPaused ? 'Play':'Pause'}</Button>\r\n        <Button onClick={props.restartTimer} style={{marginLeft: \"1rem\"}}>Restart</Button>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default TimerControls;\r\n  ","import React, { useEffect, useState } from \"react\";\r\n\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport ToggleButton from 'react-bootstrap/ToggleButton';\r\n\r\nfunction TimerOptions(props) {\r\n\r\n  const radios = [\r\n      { name: 'Pomodoro', value: props.TimerTypes.pomodoro },\r\n      { name: 'Short Break', value: props.TimerTypes.shortBreak },\r\n      { name: 'Long Break', value: props.TimerTypes.longBreak },\r\n    ];\r\n\r\n  return (\r\n    <div className=\"TimerOptions\" >\r\n        <ButtonGroup toggle style={{ width: \"100%\"}}>\r\n              {radios.map((radio, idx) => (\r\n              <ToggleButton\r\n                  key={idx}\r\n                  type=\"radio\"\r\n                  variant=\"secondary\"\r\n                  name=\"radio\"\r\n                  value={radio.value}\r\n                  checked={\r\n                    props.timerType === radio.value\r\n                  }\r\n                  onChange={\r\n                    (e) => props.updateTimerType(e.currentTarget.value)\r\n                  }\r\n              >\r\n                  {radio.name}\r\n              </ToggleButton>\r\n              ))}\r\n          </ButtonGroup>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TimerOptions;","function VisualTimer(props) {\r\n\r\n    const zeroPad = (num, places) => String(num).padStart(places, '0');\r\n\r\n    const timeInSeconds = props.time;\r\n\r\n    var minutes = Math.floor(timeInSeconds / 60);;\r\n    var seconds = timeInSeconds - (minutes*60);\r\n\r\n    return (\r\n        <div className=\"VisualTimer\" style={{margin:\"1rem\", fontSize: \"500%\"}}>\r\n            {minutes}:<span>{zeroPad(seconds, 2)}</span>\r\n        </div>\r\n    );\r\n  }\r\n  \r\n  export default VisualTimer;\r\n  ","import { useEffect, useState, useRef } from \"react\";\r\n\r\nimport Card from 'react-bootstrap/Card';\r\nimport TimerControls from './TimerControls';\r\nimport TimerOptions from \"./TimeOptions\";\r\nimport VisualTimer from \"./VisualTimer\";\r\n\r\nfunction TimerCard(props) {\r\n\r\n  \r\n\r\n\r\n    const [timerTime, setTimerTime] = useState(props.pomodoroTime);\r\n    const [isPaused, setIsPaused] = useState(true);\r\n    const [needToResetTimer, setNeedToResetTimer] = useState(false);\r\n    const [timerType, setTimerType] = useState('pomodoro');\r\n\r\n    const prevPomodoroTime = usePrevious(props.pomodoroTime);\r\n    const prevShortBreakTime = usePrevious(props.shortBreakTime);\r\n    const prevLongBreakTime = usePrevious(props.longBreakTime);\r\n\r\n    const TimerTypes = {\r\n      pomodoro: 'pomodoro',\r\n      shortBreak: 'shortBreak',\r\n      longBreak: 'longBreak'\r\n    }\r\n\r\n    var TimerLengths = {\r\n      pomodoro: (props.pomodoroTime * 60),\r\n      shortBreak: (props.shortBreakTime * 60),\r\n      longBreak: (props.longBreakTime * 60)\r\n    }\r\n\r\n    var updateTimerType= function(type){\r\n      setTimerType(type)\r\n    }\r\n\r\n    var [timer, setTimer] = useState();\r\n\r\n    var togglePause = function(){\r\n      setIsPaused(!isPaused)\r\n    }\r\n\r\n    var restartTimer = function(){\r\n      setNeedToResetTimer(true);\r\n      setIsPaused(true);\r\n    }\r\n\r\n    function usePrevious(value) {\r\n      const ref = useRef();\r\n      useEffect(() => {\r\n        ref.current = value;\r\n      });\r\n      return ref.current;\r\n    }\r\n\r\n    useEffect( ()=>{\r\n      \r\n      if(timerType === 'pomodoro'){\r\n        clearTimeout(timer);\r\n        setTimerTime(timerTime + ((props.pomodoroTime - prevPomodoroTime)* 60))\r\n      }\r\n    },[props.pomodoroTime])\r\n\r\n    useEffect( ()=>{\r\n      \r\n      if(timerType === 'shortBreak'){\r\n        clearTimeout(timer);\r\n        setTimerTime(timerTime + ((props.shortBreakTime - prevShortBreakTime)* 60))\r\n      }\r\n    },[props.shortBreakTime])\r\n\r\n    useEffect( ()=>{\r\n      \r\n      if(timerType === 'longBreak'){\r\n        clearTimeout(timer);\r\n        setTimerTime(timerTime + ((props.longBreakTime - prevLongBreakTime)* 60))\r\n      }\r\n    },[props.longBreakTime])\r\n\r\n    useEffect( ()=>{\r\n      setTimerTime(TimerLengths[timerType])\r\n      setIsPaused(true);\r\n    },[timerType]);\r\n\r\n    useEffect( ()=>{\r\n      if (needToResetTimer){ \r\n        setTimerTime(TimerLengths[timerType]);\r\n        setNeedToResetTimer(false);\r\n      }\r\n      if ((timerTime <= 0) || (isPaused)){\r\n        clearTimeout(timer);\r\n        if (timerTime <= 0 && (!needToResetTimer)){\r\n          if (timerType === TimerTypes.pomodoro){\r\n            setTimerType(TimerTypes.shortBreak)\r\n          }else{\r\n            setTimerType(TimerTypes.pomodoro)\r\n          }\r\n          \r\n        }\r\n      }else{\r\n\r\n        navigator.serviceWorker.ready.then( registration => {\r\n          registration.active.postMessage(\"START_TIMER\");\r\n        });\r\n\r\n        setTimer(setTimeout( () => {\r\n          setTimerTime(timerTime-1)\r\n        }, 1000)) \r\n      }\r\n    }, [timerTime, isPaused, needToResetTimer]);\r\n\r\n    return (\r\n      <div className=\"TimerCard\" style={{ textAlign: \"center\" }}>\r\n        \r\n        <Card>\r\n            <TimerOptions updateTimerType={updateTimerType} timerType={timerType} TimerTypes={TimerTypes}/>\r\n            <Card.Body>\r\n                <VisualTimer time={timerTime}/>\r\n                <TimerControls togglePause={togglePause} restartTimer={restartTimer} isPaused={isPaused} />\r\n            </Card.Body>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default TimerCard;","import Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\n\r\n\r\nfunction SettingsModal(props) {\r\n\r\n    return (\r\n    <div className=\"SettingsModal\" >\r\n        <Modal\r\n            {...props}\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                Settings\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n\r\n            <Row>\r\n                <Col>\r\n                    <h5>Time (minutes)</h5>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                \r\n                <Col>\r\n                    <h6>Pomodoro</h6>\r\n                    <input className=\"form-control\" id=\"example-number-input\" type=\"number\" \r\n                        min={1}\r\n                        onChange={(e)=>{ props.setUpdatedPomodoroTime(e.target.value) }} \r\n                        onBlur={(e)=>{ (e.target.value && (e.target.value >= 1)) ? console.log(\"Good\") : props.setUpdatedPomodoroTime(props.timesettings.pomodoroTime) }}\r\n                        value={props.updatedPomodoroTime} />\r\n                </Col>\r\n\r\n                <Col>\r\n                    <h6>Short Break</h6>\r\n                    <input className=\"form-control\" id=\"example-number-input\" type=\"number\" \r\n                        min={1}\r\n                        onChange={(e)=>{ props.setUpdatedShortBreakTime(e.target.value) }}\r\n                        onBlur={(e)=>{ (e.target.value && (e.target.value >= 1)) ? console.log(\"Good\") : props.setUpdatedShortBreakTime(props.timesettings.shortBreakTime) }} \r\n                        value={props.updatedShortBreakTime} />\r\n                </Col>\r\n\r\n                <Col>\r\n                    <h6>Long Break</h6>\r\n                    <input className=\"form-control\" id=\"example-number-input\" type=\"number\" \r\n                        min={1}\r\n                        onChange={(e)=>{ props.setUpdatedLongBreakTime(e.target.value) }} \r\n                        onBlur={(e)=>{ (e.target.value && (e.target.value >= 1)) ? console.log(\"Good\") : props.setUpdatedLongBreakTime(props.timesettings.longBreakTime) }}\r\n                        value={props.updatedLongBreakTime} />\r\n                </Col>\r\n            </Row>\r\n\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={props.onHide}>OK</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SettingsModal;","import SettingsModal from './SettingsModal'\r\n\r\nimport { useState, useRef, useEffect } from \"react\";\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nfunction Header(props) {\r\n\r\n  const [modalShow, setModalShow] = useState(false);\r\n\r\n  const [updatedPomodoroTime, setUpdatedPomodoroTime] = useState(props.pomodoroTime);\r\n  const [updatedShortBreakTime, setUpdatedShortBreakTime] = useState(props.shortBreakTime);\r\n  const [updatedLongBreakTime, setUpdatedLongBreakTime] = useState(props.longBreakTime);\r\n\r\n\r\n  //TODO \r\n  //write code so time is added when modal closes\r\n  const onModalClose = function(){\r\n    console.log(\"Modal Complete...\");\r\n    // console.log(oldPomo);\r\n    console.log(\"updatedPomodoroTime: \"+ updatedPomodoroTime)\r\n    console.log(\"updatedShortBreakTime: \"+ updatedShortBreakTime)\r\n    console.log(\"updatedLongBreakTime: \"+ updatedLongBreakTime)\r\n\r\n    var isFormValid = true;\r\n    console.log(isFormValid)\r\n\r\n    if ( (updatedPomodoroTime) && (updatedPomodoroTime >= 1)){\r\n      props.setPomodoroTime(updatedPomodoroTime)\r\n      \r\n    }else{\r\n      isFormValid = false;\r\n      setUpdatedPomodoroTime(props.pomodoroTime)\r\n    }\r\n\r\n    console.log(isFormValid)\r\n\r\n    if ( (updatedShortBreakTime) && (updatedShortBreakTime >= 1)){\r\n      props.setShortBreakTime(updatedShortBreakTime)\r\n      \r\n    }else{\r\n      isFormValid = false;\r\n      setUpdatedShortBreakTime(props.shortBreakTime)\r\n    }\r\n\r\n    if ( (updatedLongBreakTime) && (updatedLongBreakTime >= 1)){\r\n      props.setLongBreakTime(updatedLongBreakTime)\r\n      \r\n    }else{\r\n      isFormValid = false;\r\n      setUpdatedLongBreakTime(props.longBreakTime)\r\n    }\r\n\r\n    console.log(isFormValid)\r\n    if ( isFormValid ){\r\n      setModalShow(false);\r\n    }\r\n    \r\n  }\r\n\r\n  \r\n\r\n    return (\r\n      <div>\r\n        <h3>Pomodoro Prime 5</h3>\r\n        <span><Button  \r\n          variant={'warning'} \r\n          onClick={() => setModalShow(true)} >Settings</Button></span>\r\n        <SettingsModal\r\n          setUpdatedPomodoroTime = {setUpdatedPomodoroTime}\r\n          setUpdatedShortBreakTime = {setUpdatedShortBreakTime}\r\n          setUpdatedLongBreakTime = {setUpdatedLongBreakTime}\r\n\r\n          updatedPomodoroTime = {updatedPomodoroTime}\r\n          updatedShortBreakTime = {updatedShortBreakTime}\r\n          updatedLongBreakTime = {updatedLongBreakTime}\r\n\r\n\r\n          timesettings={props}\r\n          show={modalShow}\r\n          onHide={onModalClose}\r\n        />\r\n      </div>\r\n      \r\n    );\r\n  }\r\n  \r\n  export default Header;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport { useState } from \"react\";\n\nimport TimerCard from './components/TimerCard'\nimport Header from './components/Header'\n\n\nfunction App() {\n\n  const [pomodoroTime, setPomodoroTime] = useState(25);\n  const [shortBreakTime, setShortBreakTime] = useState(5);\n  const [longBreakTime, setLongBreakTime] = useState(15);\n\n  return (\n    <div className=\"App\" style={{ maxWidth: '40rem', marginLeft: \"auto\", marginRight: \"auto\"  }}>\n      <div style={{ maxWidth: '40rem', marginLeft: \"auto\", marginRight: \"auto\"  }}>\n        <Header pomodoroTime={pomodoroTime} setPomodoroTime={setPomodoroTime} \n          shortBreakTime={shortBreakTime} setShortBreakTime={setShortBreakTime} \n          longBreakTime={longBreakTime} setLongBreakTime={setLongBreakTime} />\n        <hr/>\n        <TimerCard pomodoroTime={pomodoroTime}\n          shortBreakTime={shortBreakTime}\n          longBreakTime={longBreakTime} />\n      </div>\n      \n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}